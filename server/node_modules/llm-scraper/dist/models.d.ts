import { LanguageModelV1 } from '@ai-sdk/provider';
import { z } from 'zod';
import { ScraperLoadResult, ScraperLLMOptions } from './index.js';
import { LlamaModel } from 'node-llama-cpp';
export type ScraperCompletionResult<T extends z.ZodSchema<any>> = {
    data: z.infer<T>;
    url: string;
};
export declare function generateAISDKCompletions<T extends z.ZodSchema<any>>(model: LanguageModelV1, page: ScraperLoadResult, schema: T, options?: ScraperLLMOptions): Promise<{
    data: z.TypeOf<T>;
    url: string;
}>;
export declare function streamAISDKCompletions<T extends z.ZodSchema<any>>(model: LanguageModelV1, page: ScraperLoadResult, schema: T, options?: ScraperLLMOptions): Promise<{
    stream: AsyncIterable<import("ai").DeepPartial<z.TypeOf<T>>> & ReadableStream<import("ai").DeepPartial<z.TypeOf<T>>>;
    url: string;
}>;
export declare function generateAISDKCode<T extends z.ZodSchema<any>>(model: LanguageModelV1, page: ScraperLoadResult, schema: T, options?: ScraperLLMOptions): Promise<{
    code: string;
    url: string;
}>;
export declare function generateLlamaCompletions<T extends z.ZodSchema<any>>(model: LlamaModel, page: ScraperLoadResult, schema: T, options?: ScraperLLMOptions): Promise<ScraperCompletionResult<T>>;
