import { Page } from 'playwright';
import { LanguageModelV1 } from '@ai-sdk/provider';
import { LlamaModel } from 'node-llama-cpp';
import { z } from 'zod';
export type ScraperLoadOptions = {
    format?: 'html' | 'text' | 'markdown' | 'cleanup';
} | {
    format: 'custom';
    formatFunction: (page: Page) => Promise<string> | string;
} | {
    format: 'image';
    fullPage?: boolean;
};
export type ScraperLoadResult = {
    url: string;
    content: string;
    format: ScraperLoadOptions['format'];
};
export type ScraperLLMOptions = {
    prompt?: string;
    temperature?: number;
    maxTokens?: number;
    topP?: number;
    mode?: 'auto' | 'json' | 'tool' | 'grammar';
};
export type ScraperRunOptions = ScraperLLMOptions & ScraperLoadOptions;
export default class LLMScraper {
    private client;
    constructor(client: LanguageModelV1 | LlamaModel);
    private preprocess;
    private generateCompletions;
    private streamCompletions;
    private generateCode;
    run<T extends z.ZodSchema<any>>(page: Page, schema: T, options?: ScraperRunOptions): Promise<{
        data: z.TypeOf<T>;
        url: string;
    }>;
    stream<T extends z.ZodSchema<any>>(page: Page, schema: T, options?: ScraperRunOptions): Promise<{
        stream: AsyncIterable<import("ai").DeepPartial<z.TypeOf<T>>> & ReadableStream<import("ai").DeepPartial<z.TypeOf<T>>>;
        url: string;
    }>;
    generate(page: any, schema: z.ZodSchema<any>, options?: ScraperLLMOptions): Promise<{
        code: string;
        url: string;
    }>;
}
